#ifndef PZEMF
#define PZEMF

#include "hardware/uart.h"
#include "pico/stdlib.h"
#include <cstdio>

#define UART_ID uart0
#define BAUD_RATE 9600

#define UART_TX_PIN 0
#define UART_RX_PIN 1

namespace pzem {
    uint8_t readVoltage[2] {0x00, 0x00};
    const uint8_t Address {0x01};

    void uartRead();
    void getHumanReadAbleData();
    void printData();
    void setCRC(uint16_t len);

    uint8_t toSend[8] {Address, 0x04, 0x00,0x00, 0x00, 0x0A,0, 0}, REGISTERS_LAST[25];
    bool lastCorrect = false;
    
    struct
    {
        uint16_t Voltage   = 0x00'00;
        uint32_t Amps      = 0x00'00'00'00;
        uint32_t Wats      = 0x00'00'00'00;
        uint32_t WatsHours = 0x00'00'00'00;
        uint16_t Frequency = 0x00'00;
        uint16_t PowerFactor = 0x00'00;
    } values;
    
    void test() {
        uartRead();
        getHumanReadAbleData();
        printData();
    }


    void uartRead() {
        uart_write_blocking(UART_ID, toSend, 8);
        if (uart_is_readable_within_us(UART_ID, 80000)) {
            uart_read_blocking(UART_ID, REGISTERS_LAST, 25);
            if (REGISTERS_LAST[0] != Address || REGISTERS_LAST[1] != 0x04) {
                lastCorrect = false;
                return;
            }
            lastCorrect = true;
        } else {
            lastCorrect = false;
        }
    }

    void getHumanReadAbleData() {
        if (!lastCorrect) return;
        values.Voltage        = (REGISTERS_LAST[3] << 8)    | REGISTERS_LAST[4];
        values.Amps           = ((REGISTERS_LAST[7] << 24)  | REGISTERS_LAST[8] << 16)  | (REGISTERS_LAST[5] << 8) | REGISTERS_LAST[6];
        values.Wats           = ((REGISTERS_LAST[11] << 24) | REGISTERS_LAST[12] << 16) | (REGISTERS_LAST[9] << 8) | REGISTERS_LAST[10];
        values.WatsHours      = ((REGISTERS_LAST[15] << 24) | REGISTERS_LAST[16] << 16) | (REGISTERS_LAST[13] << 8)| REGISTERS_LAST[14];
        values.Frequency      = (REGISTERS_LAST[17] << 8)   | REGISTERS_LAST[18];
        values.PowerFactor    = (REGISTERS_LAST[19] << 8)   | REGISTERS_LAST[20];
    }

    void printData() {
        printf("\n\n");
        printf("VOLTAGE: %i\n", values.Voltage);
        printf("Amps: %i\n", values.Amps);
        printf("Wats: %i\n", values.Wats);
        printf("WatsHours: %i\n", values.WatsHours);
        printf("Frequency: %i\n", values.Frequency);
        printf("PowerFactor: %i\n", values.PowerFactor);

    }

    void init() {
        uart_init(UART_ID, BAUD_RATE);

        gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
        gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
        uart_set_format(UART_ID, 8, 1, UART_PARITY_NONE);
        setCRC(8);
    }














    unsigned short CRC16 (unsigned char *puchMsg,unsigned short usDataLen ) ;

    void setCRC(uint16_t len){

        uint16_t crc = CRC16(toSend, len-2); // CRC of data
        printf("crc: %i", crc);
        // Write high and low byte to last two positions
        toSend[len - 2] = crc & 0xFF; // Low byte first
        toSend[len - 1] = (crc >> 8) & 0xFF; // High byte second
    }

    static unsigned char auchCRCHi[] {
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40
            } ;
    static unsigned char auchCRCLo[] {
                0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
                0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
                0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
                0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
                0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
                0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
                0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
                0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
                0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
                0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
                0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
                0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
                0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
                0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
                0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
                0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
                0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
                0x40
                }; 

        unsigned short CRC16 (unsigned char *puchMsg,unsigned short usDataLen ) /* The function returns the CRC as a unsigned short type */
        {
        unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
        unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
        unsigned uIndex ; /* will index into CRC lookup table */
        while (usDataLen--) /* pass through message buffer */
        {
        uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
        uchCRCHi = auchCRCLo[uIndex] ;
        }
        return (uchCRCHi << 8 | uchCRCLo) ;
        } 

}

#endif